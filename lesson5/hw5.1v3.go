//Пятое домашнее задание по курсу "Go. Уровень 1"
//1. Напишите приложение, рекурсивно вычисляющее заданное из стандартного ввода число Фибоначчи.
//2. Оптимизируйте приложение за счёт сохранения предыдущих результатов в мапе.
//4. Посмотрите задачи из предыдущих уроков. Как можно улучшить дизайн задач?
// Что бы вы разбили на отдельные функции или даже пакеты? Часть кода, выполняющую сортировку в домашнем задании
// к уроку 4, я вынес в отдельную функцию.
// Остальные задания состоят из небольшого количества строк, там совсем не чего упрощать.
// Добавил функциональности:
// "Написать функцию, которая будет это делать "на лету".
// Если у неё запросили значение и его нет в кеше - оно будет вычислено и положено в кеш.
// Если же запросили значение которое уже есть в кеше - то будет возвращаться сразу из кеша"
package main

import (
	"fmt"
	"time"
)

//func fiba рекурсивно вычисляет n-ое число ряда Фибоначчи.

func fiba(n int) int {
	if 0 <= n && n < 2 { //Добавил условие 0 <= n &&
		return n // Изменил 1 на n
	} else {
		return fiba(n-2) + fiba(n-1)
	}
}

//2. Оптимизируйте приложение за счёт сохранения предыдущих результатов в мапе.
// Функция func fibOnMap заполняет карту значениями последовательности чисел Фибоначии
func fibOnMap(s, n int, nFibonacci map[int]int) map[int]int {
	for i := s; i < n; i++ {
		nFibonacci[i] = fiba(i)
		fmt.Println(i, fiba(i)) // Контроль вычислений последовательности чисел, после отладки можно убрать
	}
	return nFibonacci
}

func main() {
	var answer string
	var s int // Первый элемент для расчета последовательности чисел Фибоначии
	var n int // Порядковый номер числа Фибоначчи
	//Создал карту (map) для хранения предварительно рассчитанной последовательности чисел Фибоначчи для функции fibOnMap
	nFibonacci := make(map[int]int)
	comeOnAgain := true
	for comeOnAgain {
		fmt.Println("Хотите посчитаю любое число Фибоначчи?  Введите y/n: ")
		fmt.Scanf("%s\n", &answer)
		if answer == "y" {
			fmt.Print("Для вычисления числа ряда Фибоначчи введите целое положительное число и нажмите клавишу ENTER: ")
			fmt.Scanf("%d\n", &n)
			if n < 0 {
				break //С отрицательными числами не работаем
			}
			start := time.Now() // start time
			//fmt.Println("n = ", n) //отладка
			fibOnMap(s, n, nFibonacci)
			duration := time.Since(start) // full time
			fmt.Println(duration)
			fmt.Println("Вычисленное значение из последовательности ряда чисел Фибоначчи: ", nFibonacci[n-2]+nFibonacci[n-1])
			if s < n {
				// s - это количество посчитанных чисел Фиббоначи, нужно для того,
				// чтобы в функции fibOnMap заново не пересчитывать уже вычисленные ранее значения
				s = n
			}
		} else {
			comeOnAgain = false
		}
	}
	fmt.Println("The end")
}
