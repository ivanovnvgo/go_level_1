Go. Уровень 1
Урок 7. Интерфейсы. Ошибки. Основы обработки ошибок
1. С какими интерфейсами мы уже сталкивались в предыдущих уроках? Обратите внимание на уроки, в которых мы читали из стандартного ввода и писали в стандартный вывод.
Ответ: fmt.Scanf(), fmt.Printf(),fmt.Println(), fmt.Print(), os.Args[1:].
2. Посмотрите примеры кода в своём портфолио. Везде ли ошибки обрабатываются грамотно? Хотите ли вы переписать какие-либо функции?
//Нужно обработать ошибку в https://github.com/ivanovnvgo/go_level_1/blob/lesson4/lesson4/hw4v1.go
Ответ:

Просит создать переменную err, но := не принимает, если вместо err применяю _ , то программа работает.
Как создать переменную err?

if len(originalStrings) > 0 {           //Проверка существования введенного пользователем слайса
		for i, number := range originalStrings {
			originalInt[i], err = strconv.Atoi(number) //Преобразование типа элементов исходного слайса из string в int
			//Обработка ошибки:
			if err != nil {
				log.Fatal(err)
			}
		}
		sliceSort(originalInt) //Вызов функции, сортирующей слайс originalInt методом вставки
	}

Нашел только такой способ:
_, err := fmt.Println() //объявил переменную err

Как бы памяти лишней не потребляет, это искусственная конструкция или так допустимо?
