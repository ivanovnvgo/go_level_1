//Четвертое домашнее задание по курсу "Go. Уровень 1". Измененная версия
//Напишите приложение, которое принимает на вход набор целых чисел и отдаёт на выходе его же в отсортированном виде.
//Исходный слайс не меняется
//Замечание преподавателя: Сделайте отдельную функцию, которую можно вызывать
//(как с рандомным слайсом, так и с переданным от пользовательского ввода)
//1.Привел в соответствие название исходного слайса randNumbers  - изменил на originalNumbers
//2.Перенес код сортировки в отдельную функцию slicesSort.
package main

import (
	"fmt"
)

// func slicesSort сортирует слайс методом вставки
func slicesSort(sortNumbers []int) {
	for i := 1; i < len(sortNumbers); i++ { //Внешний цикл, проход слева направо с первого элемента до последнего,
		// крайний левый (нулевой) элемент оставляем для записи
		x := sortNumbers[i] //"Фиксируем" первый элемент слайса

		j := i //Подготовка внутреннего цикла,
		// по этому индексу j проходит граница отсортированного и неотсортированного слайса

		for ; j >= 1 && sortNumbers[j-1] > x; j-- { //Внутренний цикл, проход справа налево,
			sortNumbers[j] = sortNumbers[j-1] //Меняем местами значения элентов слайса
			// (как бы более мелкие значения сдвигаем влево)
		}
		sortNumbers[j] = x //Запись минимального значения в самый "левый элемент слайса отсортированной части слайса,
		// на свое место по ранжиру, после выхода из внутреннего цикла сортировки в пределах значения j
	}
	fmt.Println("Результат сортировки методом вставки: ", sortNumbers)
}
func main() {

	var originalNumbers = []int{5, 3, 8, 1, 9, 2, 3} // Объявил слайс с заполненными исходными данными
	fmt.Print("Исходная последовательность: ")
	fmt.Println(originalNumbers)
	var sortNumbers = make([]int, len(originalNumbers))
	copy(sortNumbers, originalNumbers) // Копируем исходный слайс originalNumbers во вновь созданный слайс sortNumbers,
	// в котором будем сортировать данные методом вставки
	slicesSort(sortNumbers) //Вызов функции, сортирующей слайс sortNumbers методом вставки
}
