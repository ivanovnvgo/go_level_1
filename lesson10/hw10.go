//Десятое домашнее задание по курсу "Go. Уровень 1"
//1. Выберите три любых приложения, написанных в рамках курса, и добавьте к ним тесты.
//Обратите внимание: тестируемый код должен быть вынесен из пакета main в отдельный пакет или пакеты.
//Среды выбранных приложений обязательно должно быть хотя бы одно, в котором реализовано два разных варианта одного и того
//же алгоритма (например, в задаче на сортировку слайсов). Для таких приложений добавьте бенчмарки.
//Также хотя бы для одного приложения тестирование должно производиться на основе табличных тестов.
//Добавьте хотя бы один пример использования тестируемых функций с помощью механизма example.
//2. Познакомьтесь подробнее с библиотекой testify и попробуйте написание тестов с её помощью.
//Сравните этот способ написания тестов с вариантом, когда вы пишите тесты на чистом Go без testify.
//Какой подход вам нравится больше и почему?
//Код получен из домашней работы к пятому уроку:
//Пятое домашнее задание по курсу "Go. Уровень 1"
//1. Напишите приложение, рекурсивно вычисляющее заданное из стандартного ввода число Фибоначчи.
//2. Оптимизируйте приложение за счёт сохранения предыдущих результатов в мапе.
//4. Посмотрите задачи из предыдущих уроков. Как можно улучшить дизайн задач?
// Что бы вы разбили на отдельные функции или даже пакеты? Часть кода, выполняющую сортировку в домашнем задании
// к уроку 4, я вынес в отдельную функцию.
// Остальные задания состоят из небольшого количества строк, там совсем не чего упрощать.
// Добавил функциональности:
// "Написать функцию, которая будет это делать "на лету".
// Если у неё запросили значение и его нет в кеше - оно будет вычислено и положено в кеш.
// Если же запросили значение которое уже есть в кеше - то будет возвращаться сразу из кеша"
package main

import (
	"fmt"
	"go_level_1/go_level_1/lesson10/fibonacci"
)

func main() {
	f1, f2, err := fibonacci.IOFibonacci()
	if err != nil {
		fmt.Printf("Print error by main.go: %v\n", err)
	}
	fmt.Printf("Первое значение числа Фибоначчи %d, второе значение %d\n", f1, f2)
}
