//Урок 9. Работа с файловой системой
//К приложению из практической части предыдущего урока добавьте возможность читать данные из файлов.
//Конфигурация может быть задана в форматах yaml или json. Также по желанию вы можете добавить и другие форматы.
//Помимо чтения конфигурации приложение также должно валидировать её - например, все URL’ы должны соответствовать ожидаемым форматам.
//Работу с конфигурацией необходимо вынести в отдельный пакет (не в пакет main).
//Урок 8. Основы конфигурирования приложений
//Разработайте пакет для чтения конфигурации типичного веб-приложения через флаги или переменные окружения.
//Пример конфигурации можно посмотреть здесь. По желанию вы можете задать другие имена полям, сгруппировать их или добавить собственные поля.
//Помимо чтения конфигурации приложение также должно валидировать её - например, все URL’ы должны соответствовать ожидаемым форматам.
//Работу с конфигурацией необходимо вынести в отдельный пакет (не в пакет main).
package main

import (
	"fmt"
	"go_level_1/go_level_1/lesson9/configuration"
	"os"
)

func main() {

	configFlag, err := configuration.LoadFlag()
	if err != nil {
		fmt.Printf("config could be loaded: %#v\n", err)
		os.Exit(1) //Нужно закоментировать только на время валидации
	}
	fmt.Println("Configuration read of flag: ")
	fmt.Printf("%#v\n", configFlag)

	configFile, err := configuration.LoadFile()
	if err != nil {
		fmt.Printf("config could be loaded: %#v\n", err)
		os.Exit(1)
	}
	fmt.Println("Configuration read of file: ")
	fmt.Printf("%#v\n", configFile)

}
